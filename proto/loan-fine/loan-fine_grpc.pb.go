// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: loan-fine/loan-fine.proto

package fine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FineService_CreateFine_FullMethodName = "/fine.FineService/CreateFine"
	FineService_UpdateFine_FullMethodName = "/fine.FineService/UpdateFine"
	FineService_ListFines_FullMethodName  = "/fine.FineService/ListFines"
)

// FineServiceClient is the client API for FineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Fine service with CRUD operations
type FineServiceClient interface {
	CreateFine(ctx context.Context, in *CreateFineRequest, opts ...grpc.CallOption) (*CreateFineResponse, error)
	UpdateFine(ctx context.Context, in *UpdateFineRequest, opts ...grpc.CallOption) (*UpdateFineResponse, error)
	ListFines(ctx context.Context, in *ListFinesRequest, opts ...grpc.CallOption) (*ListFinesResponse, error)
}

type fineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFineServiceClient(cc grpc.ClientConnInterface) FineServiceClient {
	return &fineServiceClient{cc}
}

func (c *fineServiceClient) CreateFine(ctx context.Context, in *CreateFineRequest, opts ...grpc.CallOption) (*CreateFineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFineResponse)
	err := c.cc.Invoke(ctx, FineService_CreateFine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fineServiceClient) UpdateFine(ctx context.Context, in *UpdateFineRequest, opts ...grpc.CallOption) (*UpdateFineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFineResponse)
	err := c.cc.Invoke(ctx, FineService_UpdateFine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fineServiceClient) ListFines(ctx context.Context, in *ListFinesRequest, opts ...grpc.CallOption) (*ListFinesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFinesResponse)
	err := c.cc.Invoke(ctx, FineService_ListFines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FineServiceServer is the server API for FineService service.
// All implementations must embed UnimplementedFineServiceServer
// for forward compatibility.
//
// Fine service with CRUD operations
type FineServiceServer interface {
	CreateFine(context.Context, *CreateFineRequest) (*CreateFineResponse, error)
	UpdateFine(context.Context, *UpdateFineRequest) (*UpdateFineResponse, error)
	ListFines(context.Context, *ListFinesRequest) (*ListFinesResponse, error)
	mustEmbedUnimplementedFineServiceServer()
}

// UnimplementedFineServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFineServiceServer struct{}

func (UnimplementedFineServiceServer) CreateFine(context.Context, *CreateFineRequest) (*CreateFineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFine not implemented")
}
func (UnimplementedFineServiceServer) UpdateFine(context.Context, *UpdateFineRequest) (*UpdateFineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFine not implemented")
}
func (UnimplementedFineServiceServer) ListFines(context.Context, *ListFinesRequest) (*ListFinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFines not implemented")
}
func (UnimplementedFineServiceServer) mustEmbedUnimplementedFineServiceServer() {}
func (UnimplementedFineServiceServer) testEmbeddedByValue()                     {}

// UnsafeFineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FineServiceServer will
// result in compilation errors.
type UnsafeFineServiceServer interface {
	mustEmbedUnimplementedFineServiceServer()
}

func RegisterFineServiceServer(s grpc.ServiceRegistrar, srv FineServiceServer) {
	// If the following call pancis, it indicates UnimplementedFineServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FineService_ServiceDesc, srv)
}

func _FineService_CreateFine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FineServiceServer).CreateFine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FineService_CreateFine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FineServiceServer).CreateFine(ctx, req.(*CreateFineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FineService_UpdateFine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FineServiceServer).UpdateFine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FineService_UpdateFine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FineServiceServer).UpdateFine(ctx, req.(*UpdateFineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FineService_ListFines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FineServiceServer).ListFines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FineService_ListFines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FineServiceServer).ListFines(ctx, req.(*ListFinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FineService_ServiceDesc is the grpc.ServiceDesc for FineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fine.FineService",
	HandlerType: (*FineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFine",
			Handler:    _FineService_CreateFine_Handler,
		},
		{
			MethodName: "UpdateFine",
			Handler:    _FineService_UpdateFine_Handler,
		},
		{
			MethodName: "ListFines",
			Handler:    _FineService_ListFines_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loan-fine/loan-fine.proto",
}
